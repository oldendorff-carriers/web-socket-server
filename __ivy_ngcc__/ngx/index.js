import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
var WebSocketServer = /** @class */ (function (_super) {
    __extends(WebSocketServer, _super);
    function WebSocketServer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebSocketServer.prototype.getInterfaces = function () { return cordova(this, "getInterfaces", {}, arguments); };
    WebSocketServer.prototype.start = function (port, options) { return cordova(this, "start", { "observable": true, "clearFunction": "stop" }, arguments); };
    WebSocketServer.prototype.onFunctionToObservable = function (fnName) {
        return new Observable(function (observer) {
            var sv = window.cordova.plugins.wsserver;
            for (var key in sv) {
                console.log('---KEY: ', key, sv[key])
            }
            var id = window.cordova.plugins.wsserver[fnName](observer.next.bind(observer), observer.error.bind(observer));
            return function () { return window.cordova.plugins.wsserver.removeCallback(id); };
        });
    };
    /**
     * Watches for new messages
     * @return {Observable<WebSocketMessage>}
     */
    WebSocketServer.prototype.watchMessage = function () {
        console.log('----------Here1-----------')
        return this.onFunctionToObservable('onMessage');
    };
    /**
     * Watches for new opened connections
     * @return {Observable<WebSocketConnection>}
     */
    WebSocketServer.prototype.watchOpen = function () {
        return this.onFunctionToObservable('onOpen');
    };
    /**
     * Watches for closed connections
     * @return {Observable<WebSocketClose>}
     */
    WebSocketServer.prototype.watchClose = function () {
        return this.onFunctionToObservable('onClose');
    };
    /**
     * Watches for any websocket failures
     * @return {Observable<WebSocketFailure>}
     */
    WebSocketServer.prototype.watchFailure = function () {
        return this.onFunctionToObservable('onFailure');
    };
    WebSocketServer.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    WebSocketServer.prototype.send = function (conn, msg) { return cordova(this, "send", {}, arguments); };
    WebSocketServer.prototype.close = function (conn, code, reason) { return cordova(this, "close", {}, arguments); };
    WebSocketServer.pluginName = "WebSocketServer";
    WebSocketServer.plugin = "cordova-plugin-websocket-server";
    WebSocketServer.pluginRef = "cordova.plugins.wsserver";
    WebSocketServer.repo = "https://github.com/becvert/cordova-plugin-websocket-server";
    WebSocketServer.platforms = ["Android", "iOS"];
WebSocketServer.ɵfac = function WebSocketServer_Factory(t) { return ɵWebSocketServer_BaseFactory(t || WebSocketServer); };
WebSocketServer.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: WebSocketServer, factory: function (t) { return WebSocketServer.ɵfac(t); } });
var ɵWebSocketServer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WebSocketServer);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WebSocketServer, [{
        type: Injectable
    }], null, null); })();
    return WebSocketServer;
}(IonicNativePlugin));
export { WebSocketServer };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,